{
  "Colors": "Well known colors",
  "basic": "Provides access to basic micro:bit functionality.\n\nProvides access to basic micro:bit functionality.\n\nProvides access to basic calliope mini functionality.",
  "basic.color": "Converts the color name to a number",
  "basic.rgb": "Converts red, green, blue channels into a RGB color",
  "basic.rgb|param|blue": "value of the blue channel between 0 and 255. eg: 255",
  "basic.rgb|param|green": "value of the green channel between 0 and 255. eg: 255",
  "basic.rgb|param|red": "value of the red channel between 0 and 255. eg: 255",
  "basic.setLedColor": "Sets the color on the build-in LED. Set to 0 to turn off.",
  "basic.turnRgbLedOff": "Sets the color on the build-in LED. Set to 0 to turn off.",
  "input": "Events and data from sensors",
  "input.assumeCalibrationCompass": "Obsolete, compass calibration is automatic.",
  "input.clearCalibrationCompass": "Obsolete, compass calibration is automatic.",
  "input.isCalibratedCompass": "Returns 'true' when the compass is calibrated. Otherwise returns 'false'.",
  "input.soundLevel": "gets the level of loudness from 0 (silent) to 255 (loud)",
  "motors": "Blocks to control the onboard motors",
  "motors.dualMotorPower": "Controls two motors attached to the board. Switches to dual-motor mode!",
  "motors.motorCommand": "Send break, coast or sleep commands to the motor. Has no effect in dual-motor mode.",
  "motors.motorPower": "Turns on the motor at a certain percent of power. Switches to single motor mode!",
  "motors.motorPower|param|power": "%percent of power sent to the motor. Negative power goes backward. eg: 50",
  "music": "Generation of music tones.",
  "music.beat": "Returns the duration of a beat in milli-seconds",
  "music.beginMelody": "Use startMelody instead",
  "music.builtInMelody": "Gets the melody array of a built-in melody.",
  "music.changeTempoBy": "Change the tempo by the specified amount",
  "music.changeTempoBy|param|bpm": "The change in beats per minute to the tempo, eg: 20",
  "music.getFrequencyForNote": "Converts an octave and note offset into an integer frequency.\nReturns 0 if the note is out of range.\n* @param octave    The octave of the note (1 - 8)\n\n@returns         A frequency in HZ or 0 if out of range",
  "music.getFrequencyForNote|param|note": "The offset of the note within the octave",
  "music.melodyEditor": "Create a melody with the melody editor.",
  "music.noteFrequency": "Gets the frequency of a note.",
  "music.noteFrequency|param|name": "the note name",
  "music.onEvent": "Registers code to run on various melody events",
  "music.playMelody": "Play a melody from the melody editor.",
  "music.playMelody|param|melody": "string of up to eight notes [C D E F G A B C5] or rests [-] separated by spaces, which will be played one at a time, ex: \"E D G F B A C5 B \"",
  "music.playMelody|param|tempo": "number in beats per minute (bpm), dictating how long each note will play for",
  "music.playTone": "Plays a tone through pin ``P0`` for the given duration.",
  "music.playTone|param|frequency": "pitch of the tone to play in Hertz (Hz), eg: Note.C",
  "music.playTone|param|ms": "tone duration in milliseconds (ms)",
  "music.rest": "Rests (plays nothing) for a specified time through pin ``P0``.",
  "music.rest|param|ms": "rest duration in milliseconds (ms)",
  "music.ringTone": "Plays a tone through pin ``P0``.",
  "music.ringTone|param|frequency": "pitch of the tone to play in Hertz (Hz), eg: Note.C",
  "music.setPlayTone": "Sets a custom playTone function for playing melodies",
  "music.setTempo": "Sets the tempo to the specified amount",
  "music.setTempo|param|bpm": "The new tempo in beats per minute, eg: 120",
  "music.setVolume": "Set the default output volume of the sound synthesizer.",
  "music.setVolume|param|volume": "the volume 0...255",
  "music.speakerPlayTone": "Plays a tone through ``speaker`` for the given duration.",
  "music.speakerPlayTone|param|frequency": "pitch of the tone to play in Hertz (Hz)",
  "music.speakerPlayTone|param|ms": "tone duration in milliseconds (ms)",
  "music.startMelody": "Starts playing a melody.\nNotes are expressed as a string of characters with this format: NOTE[octave][:duration]",
  "music.startMelody|param|melodyArray": "the melody array to play",
  "music.startMelody|param|options": "melody options, once / forever, in the foreground / background",
  "music.stopAllSounds": "Stop all sounds and melodies currently playing.",
  "music.stopMelody": "Stops the melodies",
  "music.stopMelody|param|options": "which melody to stop",
  "music.tempo": "Returns the tempo in beats per minute. Tempo is the speed (bpm = beats per minute) at which notes play. The larger the tempo value, the faster the notes will play.",
  "music.volume": "Returns the current output volume of the sound synthesizer."
}